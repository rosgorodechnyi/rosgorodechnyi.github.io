@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{$number} is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{$digits} is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{$digits} has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{$mode} is undefined keyword.';
    @return $number;
  }
}
/* Mixin
-------------------------------------------------------------------------------------*/
@mixin clearfix{
  &:before,
  &:after{
    content: " ";
    display: table;
  }
  &:after{
    clear: both;
  }
}
@mixin placeholder($opacity, $color){
  &::-webkit-input-placeholder {opacity: $opacity; color: $color;}
  &:-moz-placeholder           {opacity: $opacity; color: $color;}
  &::-moz-placeholder          {opacity: $opacity; color: $color;}
  &:-ms-input-placeholder      {opacity: $opacity; color: $color;}
  &::-ms-input-placeholder     {opacity: $opacity; color: $color;}
}
@mixin button{
  background: none;
  border: none;
  box-shadow: none;
  cursor: pointer;
}

@mixin fontSize($size, $line){
  font-size: ($size / 16) + rem;
  line-height: decimal-round($line / $size, 2);
}
@mixin font($weight, $size, $line, $family: $arial){
  font: $weight (($size / 16) + rem)/(decimal-round($line / $size, 2)) $family;
}
@mixin fontSizeIm($size, $line){
  font-size: ($size / 16) + rem !important;
  line-height: decimal-round($line / $size, 2) !important;
}

@mixin transition($duration, $easing: $outQuad){
  transition: all $duration $easing;
}
@mixin fadeLeft($distance, $duration, $easing: $outQuad){
  transform: translate($distance, 0);
  opacity: 0;
  transition: all $duration $easing;
}
@mixin fadeUp($distance, $duration, $easing: $outQuad){
  transform: translate(0, $distance);
  opacity: 0;
  transition: all $duration $easing;
}
@mixin fade($duration, $easing: $outQuad){
  opacity: 0;
  transition: all $duration $easing;
}
@mixin cancelAnimation{
  visibility: visible;
  transform: translate(0, 0);
  opacity: 1;
}